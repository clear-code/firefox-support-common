#!/usr/bin/env python3
#
# build-xlsx - Generate a spread sheet from files
#
# USAGE
#
# (1) Output an empty sheet
#
#　   $ build-xlsx
#
# (2) Generate a filled sheet
#
#     $ build-xlsx esr60.txt esr68.txt

import re
import sys
import glob
import os

BASEDIR = os.path.dirname(os.path.realpath(__file__))
sys.path.append(BASEDIR)

import adlib
try:
    import xlsxwriter
except ImportError:
    print("ERROR: Please install xlswriter to run this script\n")
    print("  $ sudo apt install python3-xlsxwriter\n")
    sys.exit(1)

#
# Global settings

OUT_FILE = 'config.xlsx'

ESR_PREVIOUS = 'esr60'
ESR_CURRENT = 'esr68'

WORKBOOK_DEF = [
    ('基本設定', [
        'Install',
        'Application',
        'Admin',
        'Security',
        'Privacy',
        'Startup',
        'Websearch',
        'Location',
        'Download',
        'Tab',
        'Network',
        'Update',
        'Ui',
        'Script',
        'Plugin',
        'External',
        'Stability',
        'Appearance',
        'Performance',
        'Addon-IEView',
        'Addon-FireIE',
    ]),
    ('機能無効化', [
        'MenuShortcut',
    ]),
]

DEFAULT_FORMAT = {
    'valign': 'top',
    'border': 1,
    'font_size': 8,
    'font_name': 'MS Gothic',
    'text_wrap': 1
}

#
# Main

def setup_conditional_format(sheet, formats):
    countif = 'COUNTIFS($A$2:$A$9999,"",$B$2:$B$9999,$B2)<>COUNTIF($B$2:$B$9999,$B2)'

    # THE ORDER OF RULES BELOW IS IMPORTANT. THE EARLIER RULE TAKES
    # PRECEDENCE OVER THE LATER.

    # DEPRECATED
    sheet.conditional_format('B2:C9999', {
        'type':     'formula',
        'criteria': 'ISNUMBER(FIND("廃止",$C2))',
        'format':   formats['deprecated']
    })

    sheet.conditional_format('D2:J9999', {
        'type':     'formula',
        'criteria': 'ISNUMBER(FIND("廃止",$F2))',
        'format':   formats['deprecated']
    })

    # QUESTION
    sheet.conditional_format('D2:J9999', {
        'type':     'formula',
        'criteria': '$A2 = "?"',
        'format':   formats['question']
    })

    # SELECTED (NEW)
    sheet.conditional_format('D2:J9999', {
        'type':     'formula',
        'criteria': 'AND($I2 = "", $A2 <> "")',
        'format':   formats['new']
    })

    sheet.conditional_format('B2:C9999', {
        'type':     'formula',
        'criteria': 'AND($I2 = "", %s)'  % countif,
        'format':   formats['new']
    })

    # SELECTED (CHANGED)
    sheet.conditional_format('D2:J9999', {
        'type':     'formula',
        'criteria': 'AND($J2 <> $H2, $A2 <> "")',
        'format':   formats['changed']
    })

    sheet.conditional_format('B2:C9999', {
        'type':     'formula',
        'criteria': 'AND($J2 <> $H2, %s)'  % countif,
        'format':   formats['changed']
    })


    # SELECTED
    sheet.conditional_format('D2:J9999', {
        'type':     'formula',
        'criteria': '$A2 <> ""',
        'format':   formats['selected']
    })

    sheet.conditional_format('B2:C9999', {
        'type':     'formula',
        'criteria': countif,
        'format':   formats['selected']
    })

def add_verify_targets(wb):
    sheet = wb.add_worksheet('verify-targets')
    pad = -1

    for title, _ in WORKBOOK_DEF:
        for row in range(2, 1000):
            formula = '=IF(%(A)s="", "", CONCATENATE(%(B)s, "-", %(D)s))' % {
                'A': "'%s'!A%s" % (title, row),
                'B': "'%s'!B%s" % (title, row),
                'D': "'%s'!D%s" % (title, row)
            }
            sheet.write_formula(row + pad, 0, formula, None, "")
        pad += row

def main(args):
    wb = xlsxwriter.Workbook(OUT_FILE)

    conf_new = {}
    conf_old = {}

    for arg in args:
        if ESR_CURRENT in arg:
            print('%s -> %s' % (ESR_CURRENT, arg))
            conf_new = adlib.load_as_dict(arg)
        if ESR_PREVIOUS in arg:
            print('%s -> %s' % (ESR_PREVIOUS, arg))
            conf_old = adlib.load_as_dict(arg)

    formats = {
        'default':    wb.add_format(DEFAULT_FORMAT),
        'deprecated': wb.add_format({'bg_color': '#CCCCCC', 'border': 1}),
        'selected':   wb.add_format({'bg_color': '#ffd700', 'border': 1}),
        'question':   wb.add_format({'bg_color': '#90ee90', 'border': 1}),
        'new':        wb.add_format({'bg_color': '#ffb6c1', 'border': 1}),
        'changed':    wb.add_format({'bg_color': '#ff8c00', 'border': 1}),
    }

    for title, files in WORKBOOK_DEF:
        sheet = wb.add_worksheet(title)
        setup_conditional_format(sheet, formats)

        sheet.write(0, 0, '選択')
        sheet.write(0, 1, '項目番号')
        sheet.write(0, 2, '項目名')
        sheet.write(0, 3, '状態')
        sheet.write(0, 4, '選択番号')
        sheet.write(0, 5, '選択肢')
        sheet.write(0, 6, '標準設定 (%s)' % ESR_CURRENT)
        sheet.write(0, 7, '導入設定 (%s)' % ESR_CURRENT)
        sheet.write(0, 8, '標準設定 (%s)' % ESR_PREVIOUS)
        sheet.write(0, 9, '導入設定 (%s)' % ESR_PREVIOUS)

        sheet.set_column(0, 9, None, formats['default'])
        sheet.set_column(0, 0, 3)
        sheet.set_column(1, 1, 12)
        sheet.set_column(2, 2, 30)
        sheet.set_column(3, 3, 5)
        sheet.set_column(4, 4, 5)
        sheet.set_column(5, 5, 20)
        sheet.set_column(6, 6, 40)
        sheet.set_column(7, 7, 40)
        sheet.set_column(8, 8, 40)
        sheet.set_column(9, 9, 40)

        row = 1
        for fn in files:
            curr = adlib.load(os.path.join(BASEDIR, ESR_CURRENT, fn))
            prev = adlib.load_as_dict(os.path.join(BASEDIR, ESR_PREVIOUS, fn))

            for data in curr:
                if len(data['opts']) > 1:
                    sheet.merge_range(row, 1, row + len(data['opts']) - 1, 1, '')
                    sheet.merge_range(row, 2, row + len(data['opts']) - 1, 2, '')

                for d in data['opts']:
                    mark, conf = '', ''

                    if d['opt_id'] in conf_new:
                        mark, conf = 'y', conf_new[d['opt_id']]

                    label = 'IF(A#="","",IF(ISNUMBER(FIND("廃止",F#)),"廃止",IF(I#="","新機能",IF(H#<>J#,"変更",""))))'
                    label = label.replace('#', str(row+1))

                    sheet.write(row, 0, mark, formats['default'])
                    sheet.write(row, 1, data['item_id'])
                    sheet.write(row, 2, data['item_title'])
                    sheet.write_formula(row, 3, label, None, "")
                    sheet.write(row, 4, d['opt_no'])
                    sheet.write(row, 5, d['opt_title'])
                    sheet.write(row, 6, d['conf'].strip())
                    sheet.write(row, 7, conf, formats['default'])
                    sheet.write(row, 8, prev.get(d['opt_id'], ""), formats['default'])
                    sheet.write(row, 9, conf_old.get(d['opt_id'], ""), formats['default'])
                    row += 1

    add_verify_targets(wb)

    wb.close()
    print('Generated:', OUT_FILE)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
