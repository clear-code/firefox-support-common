#!/usr/bin/env python3
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# build-xlsx - Generate a spread sheet from files
#
# USAGE
#
# (1) Output an empty sheet
#
#     $ build-xlsx -o config.xlsx
#
# (2) Generate a filled sheet
#
#     $ build-xlsx esr68.txt esr78.txt ... verify-targets-to-chapters.csv
#     $ build-xlsx -p esr68.txt -c esr78.txt
#     $ build-xlsx -d ESR68:esr68.txt -d ESR78:esr78.txt -d "ESR78 variation:esr78-variation.txt"
#
import re
import sys
import glob
import getopt
import csv
import os
from collections import namedtuple

BASEDIR = os.path.dirname(os.path.realpath(__file__))
sys.path.append(BASEDIR)

import adlib
try:
    import xlsxwriter
except ImportError:
    print('ERROR: Please install xlswriter to run this script\n')
    print('  $ sudo apt install python3-xlsxwriter\n')
    sys.exit(1)

#
# Global settings

ESR_PREVIOUS = 'esr78'
ESR_CURRENT  = 'esr91'
CHAPTERS_CSV = 'verify-targets-to-chapters.csv'

WORKBOOKS = [
    ('基本設定', [
        'Install',
        'Application',
        'Admin',
        'Security',
        'Privacy',
        'Startup',
        'Websearch',
        'Location',
        'Download',
        'Tab',
        'Network',
        'Update',
        'Ui',
        'Script',
        'Plugin',
        'External',
        'Stability',
        'Appearance',
        'Performance',
        'Addon-IEView',
        'Addon-FireIE',
        'Addon-Acrobat',
    ]),
    ('機能無効化', [
        'MenuShortcut',
    ]),
]

DEFAULT_FORMAT = {
    'valign':    'top',
    'border':    1,
    'font_size': 8,
    'font_name': 'MS Gothic',
    'text_wrap': 1
}

BASE_COLUMNS = [ # label, width
    ('カテゴリー',              10), # A
    ('項目設定番号',            10), # B
    ('カスタマイズ項目 (目的)', 30), # C
    ('選択肢番号',              5),  # D
    ('選択肢',                  20), # E
    ('設定内容の雛形\n(%s)' % ESR_CURRENT.upper(), 40), # F
]

def variation_columns(key, prev_key):
    return [ # label, width
        ('反映した設定値\n(%s)' % key,       40),
        ('%s→%sでの変更' % (prev_key, key), 10),
    ]

VERIFICATION_COLUMNS = [ # label, width
    ('検証手順書対応番号', 10),
    ('',                   12),
]

PREV_VERSION_COLUNBS = [ # label, width
    ('設定内容の雛形\n(%s)' % ESR_PREVIOUS.upper(), 40),
    ('反映した設定値\n(%s)' % ESR_PREVIOUS.upper(), 40),
]

#
# XLSX writer

SheetContext = namedtuple('SheetContext', [
    'all_configs',
    'verification_chapters',
    'formats',
    'sheet',
])

RowContext = namedtuple('RowContext', [
    'index',
    'item',
    'option',
    'category',
    'prev_configs',
    'applied_prev_config',
    'template_curr_config',
    'template_prev_config',
])

def generate_xlsx(workbook, all_configs, verification_chapters, exclude_worksheets):
    formats = create_formats(workbook)
    prev_configs = all_configs[ESR_PREVIOUS.upper()]

    for title, sources in WORKBOOKS:
        if title in exclude_worksheets:
            continue

        sheet_context = SheetContext(
            all_configs,
            verification_chapters,
            formats = create_formats(workbook),
            sheet   = workbook.add_worksheet(title),
        )
        write_header(sheet_context)

        row = 1
        for source in sources:
            # We always output config items based on sources for the current version.
            # In other words, the "current version" needs to define all deprecated/obsolete items
            # if they still need to be visible in the output sheet.
            base_items = adlib.load(os.path.join(BASEDIR, ESR_CURRENT, source))
            prev_items = adlib.load_as_dict(os.path.join(BASEDIR, ESR_PREVIOUS, source))

            sheet_context.sheet.merge_range(row, 0, row + count_options(base_items) - 1, 0, '')

            for item in base_items:
                if len(item['options']) > 1:
                    sheet_context.sheet.merge_range(row, 1, row + len(item['options']) - 1, 1, '')
                    sheet_context.sheet.merge_range(row, 2, row + len(item['options']) - 1, 2, '')

                for option in item['options']:
                    option_id = option['option_id']
                    row_context = RowContext(
                      row,
                      item,
                      option,
                      source,
                      prev_configs,
                      applied_prev_config  = prev_configs.get(option_id, {'config':''})['config'],
                      template_curr_config = option['config'].strip(),
                      template_prev_config = prev_items.get(option_id, {'config':''})['config'],
                    )

                    # This must be done for all rows, otherwise merged cells will have
                    # a partial border line just for the first row.
                    write_item_heading_columns(sheet_context, row_context)

                    column_offset, format, verification_chapter = write_item_variations_columns(sheet_context, row_context)

                    write_item_leading_columns(sheet_context, row_context, format)
                    write_item_trailing_columns(sheet_context, row_context, format, column_offset,
                        verification_chapter)

                    row += 1

        write_legend(sheet_context, row + 1)

def is_deprecated(value):
    return '廃止' in value

def count_options(config):
    return sum(len(item['options']) for item in config)

def sanitize_config(config):
    return re.sub(' *[^:]+:\n', '', config).strip()

def create_formats(workbook):
    def new_format(**kwargs):
        return workbook.add_format(dict(DEFAULT_FORMAT, **kwargs))
    return {
        'default':          new_format(),
        'noborder':         new_format(border = 0),
        'center':           new_format(align = 'center'),
        'changed':          new_format(bold = True),
        'deprecated':       new_format(bg_color = '#dddddd'),
        'question':         new_format(bg_color = '#90ee90'),
        'selected':         new_format(bg_color = '#fffa95'),
        'selected_changed': new_format(bg_color = '#ffb571'),
    }

def write_header(context):
    sheet  = context.sheet
    format = context.formats['center']

    sheet.freeze_panes(1, 0)
    sheet.set_row(0, 25)

    write_header_columns(sheet, BASE_COLUMNS, format, 0)
    column_offset = len(BASE_COLUMNS)

    last_variation = ESR_PREVIOUS.upper()
    for variation in context.all_configs.keys():
        if variation == ESR_PREVIOUS.upper():
            continue
        columns = variation_columns(variation, last_variation)
        write_header_columns(sheet, columns, format, column_offset)
        column_offset += len(columns)
        last_variation = variation

    write_header_columns(sheet, VERIFICATION_COLUMNS, format, column_offset)
    column_offset += len(VERIFICATION_COLUMNS)

    write_header_columns(sheet, PREV_VERSION_COLUNBS, format, column_offset)
    column_offset += len(PREV_VERSION_COLUNBS)

    sheet.set_column(0, column_offset, None, context.formats['default'])

def write_header_columns(sheet, columns, format, column_offset):
    for index, column in enumerate(columns):
        label, width = column
        sheet.write(0, column_offset + index, label, format)
        sheet.set_column(column_offset + index, column_offset + index, width)

def write_item_heading_columns(sheet_context, row_context):
    sheet   = sheet_context.sheet
    formats = sheet_context.formats
    row     = row_context.index
    item    = row_context.item

    sheet.write(row, 0, row_context.category, formats['default']) # A

    format = formats['default']
    if is_deprecated(item['title']):
        format = formats['deprecated']

    sheet.write(row, 1, int(item['index']), format) # B
    sheet.write(row, 2, item['title'],      format) # C

def write_item_leading_columns(sheet_context, row_context, format):
    sheet  = sheet_context.sheet
    row    = row_context.index
    option = row_context.option
    sheet.write(row, 3, int(option['option_index']),      format) # D
    sheet.write(row, 4, option['option_title'],           format) # E
    sheet.write(row, 5, row_context.template_curr_config, format) # F

def write_item_variations_columns(sheet_context, row_context):
    sheet     = sheet_context.sheet
    formats   = sheet_context.formats
    row       = row_context.index
    item      = row_context.item
    option    = row_context.option
    option_id = option['option_id']

    column_offset        = len(BASE_COLUMNS)
    format               = formats['default']
    verification_chapter = ''

    last_configs        = row_context.prev_configs
    last_applied_config = row_context.applied_prev_config
    for key, variation_config in sheet_context.all_configs.items():
        if key == key == ESR_PREVIOUS.upper():
            continue

        status           = ''
        variation_format = ''
        applied_variation_config = variation_config.get(option_id, {'config':''})['config']

        if is_deprecated(item['title']) or is_deprecated(option['option_title']):
            variation_format = formats['deprecated']
        elif option_id in variation_config:
            verification_chapter = sheet_context.verification_chapters.get(option_id, '省略')
            if option_id not in last_configs:
                variation_format, status = formats['selected_changed'], '新規'
            elif sanitize_config(last_applied_config) != sanitize_config(applied_variation_config):
                variation_format, status = formats['selected_changed'], '変更あり'
            else:
                variation_format, status = formats['selected'], ''
        elif last_configs == row_context.prev_configs:
            if sanitize_config(row_context.template_curr_config) != sanitize_config(row_context.template_prev_config):
              verification_chapter = sheet_context.verification_chapters.get(option_id, '省略')
              if row_context.template_prev_config == '':
                  variation_format, status = formats['changed'], '新規（未設定）'
              else:
                  variation_format, status = formats['changed'], '変更あり（未設定）'
        else:
            if sanitize_config(last_applied_config) != sanitize_config(applied_variation_config):
                status = '削除'

        if last_configs == row_context.prev_configs:
          format = variation_format

        sheet.write(row, column_offset,     applied_variation_config, variation_format)
        sheet.write(row, column_offset + 1, status,                   variation_format)
        column_offset += 2
        last_configs        = variation_config
        last_applied_config = applied_variation_config

    return [column_offset, format, verification_chapter]

def write_item_trailing_columns(sheet_context, row_context, format, column_offset, verification_chapter):
    sheet   = sheet_context.sheet
    formats = sheet_context.formats
    row     = row_context.index
    sheet.write(row, column_offset,     verification_chapter,             formats['default'])
    sheet.write(row, column_offset + 1, '',                               formats['noborder'])
    sheet.write(row, column_offset + 2, row_context.template_prev_config, format)
    sheet.write(row, column_offset + 3, row_context.applied_prev_config,  format)

def write_legend(context, row):
    sheet   = context.sheet
    formats = context.formats
    sheet.write(row,     1, '',                                     formats['selected'])
    sheet.write(row,     2, '前バージョンから引き続き利用する項目', formats['noborder'])
    sheet.write(row + 1, 1, '',                                     formats['selected_changed'])
    sheet.write(row + 1, 2, '前バージョンから異同がある項目',       formats['noborder'])
    sheet.write(row + 2, 1, '',                                     formats['deprecated'])
    sheet.write(row + 2, 2, '廃止済みの項目',                       formats['noborder'])

#
# main

def load_verification_chapters(path):
    try:
        with open(path) as file:
            return dict(csv.reader(file))
    except FileNotFoundError:
        return {}

def main(args):
    all_configs = {}
    outfile     = 'config.xlsx'
    exclude_worksheets = []

    opts, args = getopt.getopt(args, 'o:x:p:c:d:')
    for key, value in opts:
        if key == '-o':
            outfile = value
        elif key == '-x':
            exclude_worksheets = value.split(',')
        elif key == '-p':
            all_configs[ESR_PREVIOUS.upper()] = value
        elif key == '-c':
            all_configs[ESR_CURRENT.upper()] = value
        elif key == '-d':
            parts = value.split(':', 1)
            all_configs[parts[0]] = parts[1]

    verification_chapters = {}
    for arg in args:
        if ESR_PREVIOUS in arg and not ESR_PREVIOUS.upper() in all_configs:
            print('%s -> %s' % (ESR_PREVIOUS, arg))
            all_configs[ESR_PREVIOUS.upper()] = arg
        elif ESR_CURRENT in arg and not ESR_CURRENT.upper() in all_configs:
            print('%s -> %s' % (ESR_CURRENT, arg))
            all_configs[ESR_CURRENT.upper()] = arg
        elif CHAPTERS_CSV in arg:
            print('Loading', os.path.basename(arg))
            verification_chapters = load_verification_chapters(arg)

    for label, path in all_configs.items():
        all_configs[label] = adlib.load_as_dict(path)

    with xlsxwriter.Workbook(outfile) as workbook:
        generate_xlsx(workbook, all_configs, verification_chapters, exclude_worksheets)

    print('Generated:', workbook.filename)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
