#!/usr/bin/env python3
#
# build-xlsx - Generate a spread sheet from files
#
# USAGE
#
# (1) Output an empty sheet
#
#　   $ build-xlsx -o config.xlsx
#
# (2) Generate a filled sheet
#
#     $ build-xlsx esr60.txt esr68.txt verify-targets-to-chapters.csv
#
import re
import sys
import glob
import getopt
import csv
import os

BASEDIR = os.path.dirname(os.path.realpath(__file__))
sys.path.append(BASEDIR)

import adlib
try:
    import xlsxwriter
except ImportError:
    print("ERROR: Please install xlswriter to run this script\n")
    print("  $ sudo apt install python3-xlsxwriter\n")
    sys.exit(1)

#
# Global settings

ESR_PREVIOUS = 'esr60'
ESR_CURRENT = 'esr68'
CHAPTERS_CSV = 'verify-targets-to-chapters.csv'

WORKBOOK_DEF = [
    ('基本設定', [
        'Install',
        'Application',
        'Admin',
        'Security',
        'Privacy',
        'Startup',
        'Websearch',
        'Location',
        'Download',
        'Tab',
        'Network',
        'Update',
        'Ui',
        'Script',
        'Plugin',
        'External',
        'Stability',
        'Appearance',
        'Performance',
        'Addon-IEView',
        'Addon-FireIE',
        'Addon-Acrobat',
    ]),
    ('機能無効化', [
        'MenuShortcut',
    ]),
]

DEFAULT_FORMAT = {
    'valign': 'top',
    'border': 1,
    'font_size': 8,
    'font_name': 'MS Gothic',
    'text_wrap': 1
}

#
# Main

def setup_conditional_format(sheet, formats):
    any_selected = 'COUNTIFS($A$2:$A$9999,"",$B$2:$B$9999,$B2)<>COUNTIF($B$2:$B$9999,$B2)'

    # THE ORDER OF RULES BELOW IS IMPORTANT. THE EARLIER RULE TAKES
    # PRECEDENCE OVER THE LATER.

    # NEW
    sheet.conditional_format('B2:G9999', {
        'type':     'formula',
        'criteria': 'AND(ISBLANK($I2), NOT(ISBLANK($G2)))',
        'format':   formats['new']
    })

    # DEPRECATED
    sheet.conditional_format('B2:C9999', {
        'type':     'formula',
        'criteria': 'ISNUMBER(FIND("廃止",$C2))',
        'format':   formats['deprecated']
    })

    sheet.conditional_format('D2:J9999', {
        'type':     'formula',
        'criteria': 'OR(ISNUMBER(FIND("廃止",$F2)), ISNUMBER(FIND("廃止",$G2)))',
        'format':   formats['deprecated']
    })

    # QUESTION
    sheet.conditional_format('D2:J9999', {
        'type':     'formula',
        'criteria': '$A2 = "?"',
        'format':   formats['question']
    })

def main(args):
    conf_new = {}
    conf_old = {}
    chapters = {}
    outfile = 'config.xlsx'

    opts, args = getopt.getopt(args, 'o:')
    for k, v in opts:
        if k == '-o':
            outfile = v

    wb = xlsxwriter.Workbook(outfile)

    for arg in args:
        if ESR_CURRENT in arg:
            print('%s -> %s' % (ESR_CURRENT, arg))
            conf_new = adlib.load_as_dict(arg)
        elif ESR_PREVIOUS in arg:
            print('%s -> %s' % (ESR_PREVIOUS, arg))
            conf_old = adlib.load_as_dict(arg)
        elif CHAPTERS_CSV in arg:
            print('Loading', os.path.basename(arg))
            try:
                chapters = dict(csv.reader(open(arg)))
            except FileNotFoundError:
                pass

    formats = {
        'default':          wb.add_format(DEFAULT_FORMAT),
        'deprecated':       wb.add_format(dict(DEFAULT_FORMAT, **{'bg_color': '#CCCCCC'})),
        'selected':         wb.add_format(dict(DEFAULT_FORMAT, **{'bg_color': '#ffd700'})),
        'selected_new':     wb.add_format(dict(DEFAULT_FORMAT, **{'bg_color': '#ffb6c1'})),
        'selected_changed': wb.add_format(dict(DEFAULT_FORMAT, **{'bg_color': '#ff8c00'})),
        'question':         wb.add_format(dict(DEFAULT_FORMAT, **{'bg_color': '#90ee90'})),
        'new':              wb.add_format(dict(DEFAULT_FORMAT, **{'bold': True, 'border': 2})),
    }

    for title, files in WORKBOOK_DEF:
        sheet = wb.add_worksheet(title)

    for title, files in WORKBOOK_DEF:
        sheet = wb.get_worksheet_by_name(title)
        setup_conditional_format(sheet, formats)

        sheet.write(0, 0, '選択')
        sheet.write(0, 1, '項目番号')
        sheet.write(0, 2, '項目名')
        sheet.write(0, 3, '状態')
        sheet.write(0, 4, '選択番号')
        sheet.write(0, 5, '選択肢')
        sheet.write(0, 6, '標準設定 (%s)' % ESR_CURRENT)
        sheet.write(0, 7, '導入設定 (%s)' % ESR_CURRENT)
        sheet.write(0, 8, '標準設定 (%s)' % ESR_PREVIOUS)
        sheet.write(0, 9, '導入設定 (%s)' % ESR_PREVIOUS)
        sheet.write(0, 10, '検証手順書対応番号')

        sheet.set_column(0, 10, None, formats['default'])
        sheet.set_column(0, 0, 3)
        sheet.set_column(1, 1, 12)
        sheet.set_column(2, 2, 30)
        sheet.set_column(3, 3, 5)
        sheet.set_column(4, 4, 5)
        sheet.set_column(5, 5, 20)
        sheet.set_column(6, 6, 40)
        sheet.set_column(7, 7, 40)
        sheet.set_column(8, 8, 40)
        sheet.set_column(9, 9, 40)
        sheet.set_column(10, 10, 12)

        row = 1
        for fn in files:
            curr = adlib.load(os.path.join(BASEDIR, ESR_CURRENT, fn))
            prev = adlib.load_as_dict(os.path.join(BASEDIR, ESR_PREVIOUS, fn))

            for data in curr:
                skipped_rows = 0
                item_row = row
                item_format = formats['default']
                for d in data['opts']:
                    prev_default = prev.get(d['opt_id'], '')
                    if '[廃止]' in d['conf'].strip() and '[廃止]' in prev_default:
                        skipped_rows += 1
                        continue

                    mark, conf, chapter = '', '', ' '
                    prev_conf = conf_old.get(d['opt_id'], '')
                    row_format = formats['default']

                    if d['opt_id'] in conf_new:
                        mark, conf = 'y', conf_new[d['opt_id']]
                        chapter = chapters.get(d['opt_id'], '省略')
                        item_format = formats['selected']
                        if prev_default == '':
                            item_format = formats['selected_new']
                        elif prev_conf != conf:
                            item_format = formats['selected_changed']
                        row_format = item_format

                    status = 'IF(A#="","",IF(ISNUMBER(FIND("廃止",F#)),"廃止",IF(I#="","新機能",IF(H#<>J#,"変更",""))))'
                    status = status.replace('#', str(row+1))

                    sheet.write(row, 0, mark, formats['default'])
                    sheet.write(row, 1, data['item_id'], row_format)
                    sheet.write(row, 2, data['item_title'], row_format)
                    sheet.write_formula(row, 3, status, row_format, '')
                    sheet.write(row, 4, d['opt_no'], row_format)
                    sheet.write(row, 5, d['opt_title'], row_format)
                    sheet.write(row, 6, d['conf'].strip(), row_format)
                    sheet.write(row, 7, conf, row_format)
                    sheet.write(row, 8, prev_default, row_format)
                    sheet.write(row, 9, prev_conf, row_format)
                    sheet.write(row, 10, chapter)

                    row += 1

                if len(data['opts']) - skipped_rows > 1:
                    end_row = item_row + len(data['opts']) - 1 - skipped_rows
                    sheet.merge_range(item_row, 1, end_row, 1, data['item_id'], item_format)
                    sheet.merge_range(item_row, 2, end_row, 2, data['item_title'], item_format)
                else:
                    sheet.write(item_row, 1, data['item_id'], item_format)
                    sheet.write(item_row, 2, data['item_title'], item_format)

    wb.close()
    print('Generated:', wb.filename)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
