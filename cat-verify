#!/usr/bin/env python3
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# cat-verify - Generate a Markdown verification manual
#
# USAGE
#
#     $ cat-verify -c config.txt -a variable.txt

import re
import sys
import glob
import getopt
import logging
import textwrap
import csv
import os
import collections

BASEDIR = os.path.dirname(os.path.realpath(__file__))
sys.path.append(BASEDIR)

import adlib

try:
    import jinja2
except ImportError:
    print("ERROR: Please install jinja2 to run this script\n")
    print("  $ sudo apt install python3-jinja2\n")
    sys.exit(1)

#
# GLOBALS

DEFAULT_VAR = {
    "firefox_version":                "78.0 ESR",
    "windows_version":                "Windows 10",
    "configuration_sheet_name":       "configs.xlsx",
    "meta_installer_name":            "Fx Meta Installer",
    "meta_installer_file_name":       "FxMetaInstaller",
    "meta_installer_version":         "78.0",
    "install_path_base":              "C:\\Program Files (x86)",
    "install_path_base_32bit":        "C:\\Program Files",
    "install_path":                   "C:\\Program Files (x86)\\Mozilla Firefox",
    "install_path_32bit":             "C:\\Program Files\\Mozilla Firefox",
    "exe_name":                       "firefox",
    "desktop_shortcut_path":          "C:\\Users\\Public\\Desktop\\Mozilla Firefox.lnk",
    "start_menu_shortcut_path":       "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Mozilla Firefox.lnk",
    "finish_title":                   "Mozilla Firefox",
    "finish_message":                 "インストールが完了しました",
    "restart_title":                  "Mozilla Firefox",
    "restart_message":                "今すぐコンピュータを再起動しますか？",
    "mcd_local_file":                 "autoconfig.cfg",
    "special_profile_path":           "%AppData%\\Mozilla\\Firefox",
    "special_profile_name":           "Special",
    "home_page":                      "http://example.com/",
    "history_expiration_max_pages":   "30",
    "download_dir":                   "C:\\",
    "proxy_host":                     "example.local",
    "proxy_auth_user":                "clearcode",
    "pac_url":                        "http://example.local/proxy.pac",
    "pac_url_setup":                  "data:application/javascript,",
    "ntlm_single_signon_hosts":       "sso.example.local",
    "weak_tls_allowed_hosts":         "weak.example.local",
    "max_connections":                       "6",
    "max_persistent_connections_per_server": "2",
    "max_persistent_connections_per_proxy":  "2",
    "max_pipelining_requests":               "32",
    "user_agent_name":                "Mozilla/5.0 (X11; Linux x86_64; rv:51.0) Gecko/20100101 Firefox/78.0",
    "navigator_appVersion":           "5.0 (Windows)",
    "imported_certs":                 "検証用証明書（example.com）, (発行者名1)/(証明署名1), (発行者名1)/(証明署名2), ...",
    "flash_download_url":             "https://get.adobe.com/jp/flashplayer/",
}

TEMPLATE = """
## {opt_id}

『{item_title}：{opt_title}』
{opt_title_sub_out}

**検証手順**

{conf}
"""

TEMPLATE_PRETEXT = """
## {opt_title}

{conf}
"""

TEMPLATE_OPTIONS = """
# オプション画面を使用した検証

## 事前準備

- 前項に引き続き検証するか、または以下の状態を整えておく。
    - 作成済みの `{{meta_installer_file_name}}*.exe` を検証用ユーザーとして実行し、カスタマイズ済みFirefoxのインストールを完了している。
      管理者権限を要求された場合は、`管理者`ユーザーで認証する。

## 検証

- Firefoxを起動する。
- パネルメニューからオプションを開く。
- **確認**
"""

TEMPLATE_ABOUT_CONFIG = """
# about:configを使用した検証

## 事前準備

- 前項に引き続き検証するか、または以下の状態を整えておく。
    - 作成済みの `{{meta_installer_file_name}}*.exe` を検証用ユーザーとして実行し、カスタマイズ済みFirefoxのインストールを完了している。
      管理者権限を要求された場合は、`管理者`ユーザーで認証する。

## 検証

{%if Security_9_3 %}
- ポリシー設定から `BlockAboutConfig` を削除し、`about:config` を一時的に有効化しておく。
  {% endif %}
- ユーザープロファイルの位置が `%AppData%\Mozilla` 配下にある場合、 `%AppData%\Mozilla` を削除する。そうでない場合、ユーザープロファイルフォルダ自体を削除する。
- Firefoxを起動する。
- `about:config`を開く。
- **確認**
"""

TEMPLATE_ABOUT_CONFIG_END = """
  {%if Security_9_3 %}
- ポリシー設定から一時的に削除した `BlockAboutConfig` を元に戻す。
  {% endif %}
"""

TEMPLATE_ABOUT_POLICIES = """
# about:policiesを使用した検証

## 事前準備

- 前項に引き続き検証するか、または以下の状態を整えておく。
    - 作成済みの `{{meta_installer_file_name}}*.exe` を検証用ユーザーとして実行し、カスタマイズ済みFirefoxのインストールを完了している。
      管理者権限を要求された場合は、`管理者`ユーザーで認証する。

## 検証

- Firefoxを起動する。
- `about:policies`を開く。
- 「有効」を選択する。
- **確認**
"""

TEMPLATE_SHORTCUT = """
# その他のキーボードショートカットの検証

## 事前準備

- 前項に引き続き検証するか、または以下の状態を整えておく。
    - 作成済みの `{{meta_installer_file_name}}*.exe` を検証用ユーザーとして実行し、カスタマイズ済みFirefoxのインストールを完了している。
      管理者権限を要求された場合は、`管理者`ユーザーで認証する。

## 検証

- Firefoxを起動する。
- **確認**
"""

TEMPLATE_DEVTOOL_MENU = """
# 開発ツールのメニュー項目の検証

## 事前準備

- 前項に引き続き検証するか、または以下の状態を整えておく。
    - 作成済みの `{{meta_installer_file_name}}*.exe` を検証用ユーザーとして実行し、カスタマイズ済みFirefoxのインストールを完了している。
      管理者権限を要求された場合は、`管理者`ユーザーで認証する。

## 検証

- Firefoxを起動する。
- 「ツール」メニューの「ウェブ開発」サブメニューを開く。
- **確認**
"""

TEMPLATE_DEVTOOL_PANEL = """
- パネルメニューの「ウェブ開発」サブメニューを開く。
- **確認**
"""

TEMPLATE_DEVTOOL_SKIPPED = """
# 開発ツールの個別の検証

開発ツール非表示のため、「ツール」メニューの「ウェブ開発」およびサブメニューパネルメニューの「ウェブ開発」サブメニュー配下の以下の項目の非表示化は、検証を省略する。

"""

FILES = [
    'PRETEXT',
    'Install',
    'Application',
    'Admin',
    'Security',
    'Privacy',
    'Startup',
    'Websearch',
    'Location',
    'Download',
    'Tab',
    'Network',
    'Update',
    'Ui',
    'Script',
    'Plugin',
    'External',
    'Stability',
    'Appearance',
    'Performance',
    'Addon-IEView',
    'Addon-FireIE',
    'Addon-Acrobat',
    'MenuShortcut',
]

SPECIALS = [
    'OVERWRITE',
    'OPTIONS',
    'ABOUT_CONFIG',
    'ABOUT_POLICIES',
]

#
# Utils

def parse_special(text):
    ht = text.split('\n', maxsplit=1)

    if ht[0] in SPECIALS:
        return (ht[0], ht[1])

    return ('', text)

PAT_DISABLED_ITEM_KEY = re.compile('(DISABLED_[A-Z_]+):\s+(.+)\Z')

def shift_disabled_item(text):
    ht = text.split('\n', maxsplit=1)

    match = re.match(PAT_DISABLED_ITEM_KEY, ht[0])
    if match:
        rest = ''
        if len(ht) > 1:
            rest = ht[1]
        return (match.group(1), match.group(2), rest)

    return ('', '', text)

def apply_vars(items, vars):
    for item in items:
        for opt in item['opts']:
            if opt['opt_id'] not in vars:
                continue

            sp, text = parse_special(vars[opt['opt_id']])
            if sp == 'OVERWRITE':
                opt['conf'] = text
            else:
                opt['conf'] += text
    return items

PAT_PRETEXT_OPTION = re.compile('^[^-]+-0-[0-9]+\Z')
PAT_LIST_ITEM = re.compile('^(\s*)- (.+)$', re.MULTILINE)

def create_template(manual, conf, vars):
    items_options = []
    items_about_config = []
    items_about_policies = []
    items_disabled_shortcuts = []
    items_disabled_devtool_menu = []

    template = vars.get('COVER', '') + '\n'
    template += "# 事前準備"

    for item in manual['PRETEXT']:
        for opt in item['opts']:
            template += TEMPLATE_PRETEXT.format(**opt) + '\n'


    # prepare internal variables

    for items in manual.values():
        for item in items[1:]:
            for opt in item['opts']:
                vars[opt['opt_id'].replace('-', '_')] = opt['opt_id'] in conf
                vars['not ' + opt['opt_id'].replace('-', '_')] = opt['opt_id'] not in conf

    vars['DisableDeveloperTools'] = vars['MenuShortcut_10_1'] or vars['MenuShortcut_11_1'] or vars['MenuShortcut_12_1'] or vars['MenuShortcut_13_1'] or vars['MenuShortcut_14_1'] or vars['MenuShortcut_15_1'] or vars['MenuShortcut_16_1'] or vars['MenuShortcut_17_1'] or vars['MenuShortcut_18_1'] or vars['MenuShortcut_21_1'] or vars['MenuShortcut_22_1'] or vars['MenuShortcut_23_1'] or vars['MenuShortcut_24_1'] or vars['MenuShortcut_25_1'] or vars['MenuShortcut_26_1'] or vars['MenuShortcut_28_1'] or vars['MenuShortcut_29_1'] or vars['MenuShortcut_57_1'] or vars['MenuShortcut_64_1'] or vars['MenuShortcut_65_1']
    vars['not DisableDeveloperTools'] = not vars['DisableDeveloperTools']

    vars['DisableSync'] = vars['Privacy_22_2'] or vars['Privacy_22_3'] or vars['Privacy_24_2'] or vars['Privacy_24_3']
    vars['not DisableSync'] = not vars['DisableSync']
    vars['DisableFirefoxAccount'] = vars['DisableSync']
    vars['not DisableFirefoxAccount'] = not vars['DisableFirefoxAccount']

    vars['OfferToSaveLogins'] = not (vars['Privacy_5_2'] or vars['Privacy_5_3'] or vars['Privacy_5_4'])
    vars['not OfferToSaveLogins'] = not vars['OfferToSaveLogins']

    vars['UsePACFile'] = vars['Network_2_3'] or vars['Network_2_8']

    vars['UseBlockList'] = not (vars['Security_5_2'] or vars['Security_6_2'] or vars['Privacy_33_3'] or vars['Privacy_33_5'])

    vars['InstallAddonsPermission'] = vars['Security_3_3'] or vars['Security_3_6'] or vars['Security_3_7']

    vars['DisableSync'] = vars['Privacy_22_2'] or vars['Privacy_22_3']
    vars['not DisableSync'] = not vars['DisableSync']

    all_ids = []

    chapters = {}
    chapter_options = []
    chapter_about_config = []
    chapter_about_policies = []
    chapter_disabled_shortcut = []
    chapter_disabled_devtool = []

    first_level_chapter = 2
    for items in manual.values():
        tmp = ''

        if len(items) > 0 and re.match(PAT_PRETEXT_OPTION, items[0]['opts'][0]['opt_id']):
            second_level_chapter = 2
        else:
            second_level_chapter = 1

        for item in items[1:]:
            for opt in item['opts']:
                if opt['opt_id'] not in conf:
                    continue

                conf_values = conf.get(opt['opt_id'], '')
                opt['opt_title'] = conf_values['opt_title']
                opt['opt_title_sub'] = conf_values['opt_title_sub']

                if opt['opt_title_sub'] in vars:
                    if not vars[opt['opt_title_sub']]:
                        continue
                    opt['opt_title_sub'] = ''

                sp, text = parse_special(opt['conf'])
                if sp == 'OPTIONS':
                    items_options.append((opt['opt_id'], opt['opt_title_sub'], text))
                    all_ids.append((opt['opt_id'], opt['opt_title_sub'], 'specials-options'))
                    chapter_options.append(opt['opt_id'])
                    continue
                elif sp == 'ABOUT_CONFIG':
                    items_about_config.append((opt['opt_id'], opt['opt_title_sub'], text))
                    all_ids.append((opt['opt_id'], opt['opt_title_sub'], 'specials-about-config'))
                    chapter_about_config.append(opt['opt_id'])
                    continue
                elif sp == 'ABOUT_POLICIES':
                    items_about_policies.append((opt['opt_id'], opt['opt_title_sub'], text))
                    all_ids.append((opt['opt_id'], opt['opt_title_sub'], 'specials-about-policies'))
                    chapter_about_policies.append(opt['opt_id'])
                    continue

                while True:
                    key, desc, text = shift_disabled_item(text)
                    if key == '':
                        break
                    elif key == 'DISABLED_SHORTCUT':
                        items_disabled_shortcuts.append((opt['opt_id'], desc))
                        all_ids.append((opt['opt_id'], opt['opt_title_sub'], 'disabled-shortcut'))
                        chapter_disabled_shortcut.append(opt['opt_id'])
                    elif key == 'DISABLED_DEVTOOL_MENU':
                        items_disabled_devtool_menu.append((opt['opt_id'], desc))
                        all_ids.append((opt['opt_id'], opt['opt_title_sub'], 'disabled-devloop-menu'))
                        chapter_disabled_devtool.append(opt['opt_id'])

                if text == '':
                    continue

                opt['conf'] = text

                opt['opt_title_sub_out'] = opt['opt_title_sub']
                if opt['opt_title_sub_out'] != '':
                    opt['opt_title_sub_out'] = '（' + opt['opt_title_sub_out'] + '）'

                tmp += TEMPLATE.format(**opt, **item) + '\n'
                if not re.match(PAT_PRETEXT_OPTION, opt['opt_id']):
                    all_ids.append((opt['opt_id'], opt['opt_title_sub'], opt['opt_id']))

                    capter_id = '%s.%s' % (first_level_chapter, second_level_chapter)
                    if capter_id in chapters:
                        option_ids = chapters[capter_id]
                    else:
                        option_ids = []
                    option_ids.append(opt['opt_id'])
                    chapters[capter_id] = option_ids

                second_level_chapter += 1

        if not tmp:
            continue  # Nothing to verify

        template += '\n# %s' % items[0]['item_title']
        for opt in items[0]['opts']:
            template += TEMPLATE_PRETEXT.format(**opt) + '\n'
        template += tmp

        first_level_chapter += 1

    if items_options:
        template += TEMPLATE_OPTIONS
        for opt_id, opt_title_sub, text in items_options:
            if opt_title_sub:
                suffix = ' (%s %s)' % (opt_id, opt_title_sub)
            else:
                suffix = ' (%s)' % (opt_id)
            template += re.sub(PAT_LIST_ITEM, '\\1    - \\2 %s' % (suffix), text)
            template += '\n'

        chapters['%s' % (first_level_chapter)] = chapter_options
        first_level_chapter += 1

    if items_about_config:
        template += TEMPLATE_ABOUT_CONFIG
        config_list = []
        for opt_id, opt_title_sub, text in items_about_config:
            if opt_title_sub:
                suffix = ' (%s %s)' % (opt_id, opt_title_sub)
            else:
                suffix = ' (%s)' % (opt_id)
            config_list.append(re.sub(PAT_LIST_ITEM, '\\1    - \\2 %s' % (suffix), text))
        config_list.sort()
        template += '\n'.join(config_list)
        template += TEMPLATE_ABOUT_CONFIG_END
        template += '\n'
        chapters['%s' % (first_level_chapter)] = chapter_about_config
        first_level_chapter += 1

    if items_about_policies:
        template += TEMPLATE_ABOUT_POLICIES
        for opt_id, opt_title_sub, text in items_about_policies:
            if opt_title_sub:
                suffix = ' (%s %s)' % (opt_id, opt_title_sub)
            else:
                suffix = ' (%s)' % (opt_id)
            template += re.sub(PAT_LIST_ITEM, '\\1    - \\2 %s' % (suffix), text)
            template += '\n'
        chapters['%s' % (first_level_chapter)] = chapter_about_policies
        first_level_chapter += 1

    if items_disabled_shortcuts:
        template += TEMPLATE_SHORTCUT
        for opt_id, text in items_disabled_shortcuts:
            template += '    - %s (%s)\n' % (text, opt_id)
        chapters['%s' % (first_level_chapter)] = chapter_disabled_shortcut
        first_level_chapter += 1

    if items_disabled_devtool_menu:
        if vars['DisableDeveloperTools']:
            template += TEMPLATE_DEVTOOL_SKIPPED
            for opt_id, text in items_disabled_devtool_menu:
                template += '- %s (%s)\n' % (text, opt_id)
        else:
            template += TEMPLATE_DEVTOOL_MENU
            for opt_id, text in items_disabled_devtool_menu:
                template += '    - %s (%s)\n' % (text, opt_id)
            template += TEMPLATE_DEVTOOL_PANEL
            for opt_id, text in items_disabled_devtool_menu:
                template += '    - %s (%s)\n' % (text, opt_id)

        chapters['%s' % (first_level_chapter)] = chapter_disabled_devtool
        first_level_chapter += 1

    template += '\n' + vars.get('POSTSCRIPT', '')


    #if all_ids:
    #    #all_ids.sort(key=lambda x: [x[0].split('-')[0]] + list(map(int, x[0].split('-')[1:])))
    #    #template += '\n# 索引\n'
    #    template += '\n# 検証対象項目一覧\n'
    #    for opt_id, opt_title_sub, reference in all_ids:
    #        template += '\n* %s %s' % (opt_id, opt_title_sub)

    return (template, chapters)

def chapters_to_csv(chapters):
    chapters_by_opt_id = {}
    for chapter_id, opt_ids in chapters.items():
        for opt_id in opt_ids:
            if opt_id in chapters_by_opt_id:
                chapter_ids = chapters_by_opt_id[opt_id]
            else:
                chapter_ids = []
            if not chapter_id in chapter_ids:
                chapter_ids.append(chapter_id)
                chapters_by_opt_id[opt_id] = chapter_ids

    csv_source = []
    for opt_id, chapter_ids in chapters_by_opt_id.items():
        csv_source.append((opt_id, "\n".join(chapter_ids)))

    return csv_source

def chapters_to_checklist(chapters):
    rows = []
    rows.append(("見出し番号", "検証対象項目", "検証結果（ok/ng）"))
    for chapter_id, opt_ids in chapters.items():
        for opt_id in opt_ids:
            rows.append(("%s" % chapter_id, opt_id, ""))

    return rows

#
# Main

def usage(err):
    print('error: %s' % err, file=sys.stderr)
    print('usage: %s INFILE' % sys.argv[0], file=sys.stderr)
    sys.exit(1)

def main(args):
    conf = {}
    vars = {}

    only_index_output = False
    only_checklist_output = False

    opts, args = getopt.getopt(args, 'c:a:il')
    for k, v in opts:
        if k == '-c':
            conf = adlib.load_as_dict(v)
        elif k == '-a':
            vars = adlib.load_variables(v)
        elif k == '-i':
            only_index_output = True
        elif k == '-l':
            only_checklist_output = True

    vars = {**DEFAULT_VAR, **vars}
    manual = collections.OrderedDict()
    for fn in FILES:
        items = adlib.load('verify/%s' % fn)
        manual[fn] = apply_vars(items, vars)

    template, chapters = create_template(manual, conf, vars)

    if only_index_output:
        csv_writer = csv.writer(sys.stdout)
        csv_writer.writerows(chapters_to_csv(chapters))
    elif only_checklist_output:
        csv_writer = csv.writer(sys.stdout,  quotechar='"', quoting=csv.QUOTE_ALL)
        csv_writer.writerows(chapters_to_checklist(chapters))
    else:
        logging.basicConfig(format="\033[31m%(message)s\033[0m")
        log = logging.getLogger(__name__)

        env = jinja2.Environment(undefined=jinja2.make_logging_undefined(log))
        print(env.from_string(template).render(vars))

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
