#!/usr/bin/env python3
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# cat-verify - Generate a Markdown verification manual
#
# USAGE
#
#     $ cat-verify -c config.txt -a variable.txt

import re
import sys
import glob
import getopt
import logging
import textwrap
import csv
import os
import collections

BASEDIR = os.path.dirname(os.path.realpath(__file__))
sys.path.append(BASEDIR)

import adlib

try:
    import jinja2
except ImportError:
    print("ERROR: Please install jinja2 to run this script\n")
    print("  $ sudo apt install python3-jinja2\n")
    sys.exit(1)

#
# GLOBALS

TEMPLATE = """
## {opt_id}

『{item_title}』

**検証手順**

{conf}
"""

TEMPLATE_PRETEXT = """
## {opt_title}

{conf}
"""

TEMPLATE_ABOUT_CONFIG = """
# about:configを使用した検証

## 事前準備

- 前項に引き続き検証するか、または以下の状態を整えておく。
    - 作成済みの `{{meta_installer_file_name}}*.exe` を検証用ユーザーとして実行し、カスタマイズ済みFirefoxのインストールを完了している。
      管理者権限を要求された場合は、`管理者`ユーザーで認証する。
- ポリシー設定から一時的に `DisableDeveloperTools` を削除しておく。
- ポリシー設定から一時的に `BlockAboutConfig` を削除しておく。
- Firefoxを起動する。
- `about:config`を開く。
"""

TEMPLATE_ABOUT_POLICIES = """
# about:policiesを使用した検証

## 事前準備

- 前項に引き続き検証するか、または以下の状態を整えておく。
    - 作成済みの `{{meta_installer_file_name}}*.exe` を検証用ユーザーとして実行し、カスタマイズ済みFirefoxのインストールを完了している。
      管理者権限を要求された場合は、`管理者`ユーザーで認証する。
- Firefoxを起動する。
- `about:policies`を開く。
- 「有効」を選択する。
"""

FILES = [
    'PRETEXT',
    'Install',
    'Application',
    'Admin',
    'Security',
    'Privacy',
    'Startup',
    'Websearch',
    'Location',
    'Download',
    'Tab',
    'Network',
    'Update',
    'Ui',
    'Script',
    'Plugin',
    'External',
    'Stability',
    'Appearance',
    'Performance',
    'Addon-IEView',
    'Addon-FireIE',
    'Addon-Acrobat',
]

SPECIALS = [
    'OVERWRITE',
    'ABOUT_CONFIG',
    'ABOUT_POLICIES',
]

#
# Utils

def parse_special(text):
    ht = text.split('\n', maxsplit=1)

    if ht[0] in SPECIALS:
        return (ht[0], ht[1])

    return ('', text)

def apply_vars(items, vars):
    for item in items:
        for opt in item['opts']:
            if opt['opt_id'] not in vars:
                continue

            sp, text = parse_special(vars[opt['opt_id']])
            if sp == 'OVERWRITE':
                opt['conf'] = text
            else:
                opt['conf'] += text
    return items

def create_template(manual, conf, vars):
    about_config = []
    about_policies = []

    template = vars.get('COVER', '') + '\n'
    template += "# 事前準備"

    for item in manual['PRETEXT']:
        for opt in item['opts']:
            template += TEMPLATE_PRETEXT.format(**opt) + '\n'

    for items in manual.values():
        tmp = ''

        for item in items[1:]:
            for opt in item['opts']:
                if opt['opt_id'] not in conf:
                    continue

                sp, text = parse_special(opt['conf'])
                if sp == 'ABOUT_CONFIG':
                    about_config.append((opt['opt_id'], text))
                    continue
                elif sp == 'ABOUT_POLICIES':
                    about_policies.append((opt['opt_id'], text))
                    continue

                tmp += TEMPLATE.format(**opt, **item) + '\n'

        if not tmp:
            continue  # Nothing to verify

        template += '\n# %s' % items[0]['item_title']
        for opt in items[0]['opts']:
            template += TEMPLATE_PRETEXT.format(**opt) + '\n'
        template += tmp

    if about_config:
        template += TEMPLATE_ABOUT_CONFIG
        for opt_id, text in about_config:
            template += '\n## %s\n' % opt_id
            template += text + '\n'

    if about_policies:
        template += TEMPLATE_ABOUT_POLICIES
        for opt_id, text in about_policies:
            template += '\n## %s\n' % opt_id
            template += text + '\n'

    template += '\n' + vars.get('POSTSCRIPT', '')

    return template

#
# Main

def usage(err):
    print('error: %s' % err, file=sys.stderr)
    print('usage: %s INFILE' % sys.argv[0], file=sys.stderr)
    sys.exit(1)

def main(args):
    conf = {}
    vars = {}

    opts, args = getopt.getopt(args, 'c:a:')
    for k, v in opts:
        if k == '-c':
            conf = adlib.load_as_dict(v)
        elif k == '-a':
            vars = adlib.load_variables(v)

    manual = collections.OrderedDict()
    for fn in FILES:
        items = adlib.load('verify/%s' % fn)
        manual[fn] = apply_vars(items, vars)

    template = create_template(manual, conf, vars)

    logging.basicConfig(format="\033[31m%(message)s\033[0m")
    log = logging.getLogger(__name__)

    env = jinja2.Environment(undefined=jinja2.make_logging_undefined(log))
    print(env.from_string(template).render(vars))

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
