require "rake/clean"
require "tempfile"
require "csv"
require "mustache"

#MD_FILES = FileList["*.md"]
MD_FILES = FileList["verification_manual.md"]
PDF_FILES = MD_FILES.map{|file| file.ext(".pdf") }
DOCX_FILES = MD_FILES.map{|file| file.ext(".docx") }
ODT_FILES = MD_FILES.map{|file| file.ext(".odt") }
SOURCE_CONFIGS_SPREADHSEET = "../configurations/customization-items.ods"
CHAPTERS_FILE = "verify-targets-to-chapters.csv"
VARIABLES = {
  is_upgrade_from_uncontrolled:   true,
  firefox_version:                "52.0 ESR",
  windows_version:                "Windows 7",
  configuration_sheet_name:       "customization-items.ods",
  meta_installer_name:            "Fx Meta Installer",
  meta_installer_file_name:       "FxMetaInstaller",
  meta_installer_version:         "52.0",
  install_path:                   "C:\\Program Files (x86)\\Mozilla Firefox",
  desktop_shortcut_path:          "C:\\Users\\Public\\Desktop\\Firefox.lnk",
  start_menu_shortcut_path:       "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Firefox.lnk",
  finish_title:                   "Mozilla Firefox",
  finish_message:                 "インストールが完了しました",
  restart_title:                  "Mozilla Firefox",
  restart_message:                "今すぐコンピュータを再起動しますか？",
  mcd_local_file:                 "autoconfig.cfg",
  special_profile_path:           "%AppData%\\Mozilla\\Firefox\\Profiles",
  special_profile_name:           "Special",
  use_separate_profile:           false,
  start_with_no_remote:           false,
  home_page:                      "http://?????",
  window_title:                   "Mozilla Firefox",
  disabled_about_pages:           "about:robots",
  history_expiration_max_pages:   "???",
  expire_history_by_days_version: "Flexible Expire History by Days",
  max_cache_size_in_megabytes:    "???",
  download_dir:                   "C:\\?????",
  proxy_host:                     "10.0.2.2",
  proxy_auth_user:                "clearcode",
  pac_url:                        "http://??????/proxy.pac",
  pac_url_setup:                  "",
  ntlm_single_signon_hosts:       "????,????,????",
  max_connections:                       "6",
  max_persistent_connections_per_server: "2",
  max_persistent_connections_per_proxy:  "2",
  max_pipelining_requests:               "32",
  user_agent_name:                "Mozilla/5.0 (X11; Linux x86_64; rv:51.0) Gecko/20100101 Firefox/51.0",
  jar_file_sample_url_base:       "http://www.clear-code.com/temp",
  imported_certs:                 "検証用証明書（example.com）, (発行者名1)/(証明署名1), (発行者名1)/(証明署名2), ...",
  use_disableaboutconfig:         true,
  use_disableupdate:              true,
  use_disableaddons:              true,
  use_globalchromecss:            true,
  use_uitextoverrider:            true,
  use_silverlight:                true,
  use_policyengine:               true,
  java_download_url:              "https://java.com/ja/download/",
  flash_download_url:             "https://get.adobe.com/jp/flashplayer/",
  acrobat__download_url:          "https://get.adobe.com/jp/reader/",
  shockwave__download_url:        "https://get.adobe.com/jp/shockwave/",
  silverlight_download_url:       "http://www.microsoft.com/silverlight/resources/install.aspx",
  wmp__download_url:              "http://www.interoperabilitybridges.com/Windows-Media-Player-Firefox-Plugin-Download",
}

CLOBBER.include(PDF_FILES)

class TemplateResolver
  class << self
    def resolve(contents, variables)
      new(contents, variables).resolve
    end
  end

  attr_reader :verify_targets

  def initialize(contents, variables)
    @contents = contents
    @variables = variables
    @verify_targets = []
  end

  def resolve
    prepare_firefox_version_variables
    prepare_customizations_variables
    @variables["TRUE"] = true
    @variables["FALSE"] = false
    resolve_and_conditions
    resolve_or_conditions
    Mustache.render(@contents, @variables)
  end

  private
  def prepare_firefox_version_variables
    current_firefox_major_version = @variables[:firefox_version].split(".").first.to_i
    @variables["firefox#{current_firefox_major_version}"] = true
    (24..99).each do |version|
      @variables["firefox#{version}_or_older"] = current_firefox_major_version <= version
      @variables["firefox#{version}_or_later"] = current_firefox_major_version >= version
    end
  end

  def prepare_customizations_variables
    system("ssconvert", "-S", SOURCE_CONFIGS_SPREADHSEET, "#{SOURCE_CONFIGS_SPREADHSEET}.%s.csv")
    verify_targets = CSV.read("#{SOURCE_CONFIGS_SPREADHSEET}.verify-targets.csv")
    verify_targets.each do |key, _|
      next if key.nil? or key.strip.empty?
      @verify_targets << key
      @variables[key] = true
      if key.count("-") > 1
        chosen_sub_index = key.split("-").last.to_i
        base_key = key.gsub(/-[^-]+\z/, "")
        @variables[base_key] = true
        (1..10).each do |sub_index|
          unless sub_index == chosen_sub_index
            @variables["#{base_key}-#{sub_index}"] = false
          end
        end
      end
    end
  end

  AND_CONDITIONS_MATCHER = /\{\{([#^\/])([^&}]+\&\&[^}]+)\}\}/
  def resolve_and_conditions
    @contents.gsub!(AND_CONDITIONS_MATCHER) do |match|
      prefix = match.gsub(AND_CONDITIONS_MATCHER, "\\1")
      variable_names = match.gsub(AND_CONDITIONS_MATCHER, "\\2").split("&&").collect do |name|
        name.strip
      end
      if variable_names.all?{|name| @variables[name] }
        "{{#{prefix}TRUE}}"
      else
        "{{#{prefix}FALSE}}"
      end
    end
  end

  OR_CONDITIONS_MATCHER = /\{\{([#^\/])([^|}]+\|\|[^}]+)\}\}/
  def resolve_or_conditions
    @contents.gsub!(OR_CONDITIONS_MATCHER) do |match|
      prefix = match.gsub(OR_CONDITIONS_MATCHER, "\\1")
      variable_names = match.gsub(OR_CONDITIONS_MATCHER, "\\2").split("||").collect do |name|
        name.strip
      end
      variable_names.select! do |name|
        @variables[name]
      end
      if variable_names.empty?
        "{{#{prefix}FALSE}}"
      else
        "{{#{prefix}#{variable_names.sort.first}}}"
      end
    end
  end
end

class ContentsCleaner
  class << self
    def cleanup(contents)
      new(contents).cleanup
    end
  end

  def initialize(contents)
    introduction, contents = contents.split(/<!-- *VERIFICATIONS ARE FROM HERE *-->/)
    @introduction = introduction
    @contents = contents
  end

  def cleanup
    cleanup_separators
    cleanup_no_child_parents
    cleanup_no_verification_steps
    cleanup_no_verification_sections
    cleanup_blank_chapters
    cleanup_blank_subsections

    @contents.gsub!(/^[ \t]*<!--[^>]*-->\n|<!--[^>]*-->/, "")

    cleanup_blank_lines

    "#{@introduction}\n#{@contents}"
  end

  private

  SEPARATORS_MATCHER = /<!-- *[-=]+ *-->/
  def cleanup_separators
    @contents.gsub!(SEPARATORS_MATCHER, "")
  end

  BLANK_LINE_MATCHER = /^( *([-*]|[0-9]+\. ).+\n)\n+( *([-*]|[0-9]+\. ))/m
  def cleanup_blank_lines
    while @contents.match(BLANK_LINE_MATCHER) do
      @contents.sub!(BLANK_LINE_MATCHER, "\\1\\3")
    end
  end

  NO_CHILD_PARENTS_MATCHER = /^[0-9]+\. 以下の(アドオン|カスタマイズ)を[有無]効化する。(\n+(^[0-9#]|\z))/m
  def cleanup_no_child_parents
    while @contents.match(NO_CHILD_PARENTS_MATCHER) do
      @contents.sub!(NO_CHILD_PARENTS_MATCHER, "\\2")
    end
  end

  NO_VERIFICATION_STEP_GROUPS_MATCHER = /^<!-- *GROUP *-->[^<]*\n *- *確認項目\n+<!-- *\/ *GROUP *-->/
  NO_VERIFICATION_STEPS_MATCHER = /^ *- *確認項目\n+( ?[0-9]\. |^#)/m
  def cleanup_no_verification_steps
    while @contents.match(NO_VERIFICATION_STEP_GROUPS_MATCHER) do
      @contents.sub!(NO_VERIFICATION_STEP_GROUPS_MATCHER, "")
    end

    while @contents.match(NO_VERIFICATION_STEPS_MATCHER) do
      @contents.sub!(NO_VERIFICATION_STEPS_MATCHER, "\\1")
    end
  end

  NO_VERIFICATION_SECTIONS_MATCHER = /^## [^#]+^### 確認する項目$\s*^###.*?(^##? |\z)/m
  def cleanup_no_verification_sections
    while @contents.match(NO_VERIFICATION_SECTIONS_MATCHER) do
      @contents.sub!(NO_VERIFICATION_SECTIONS_MATCHER, "\\1")
    end
  end

  BLANK_CHAPTERS_MATCHER = /^# [^#]+(^# |\z)/m
  def cleanup_blank_chapters
    while @contents.match(BLANK_CHAPTERS_MATCHER) do
      @contents.sub!(BLANK_CHAPTERS_MATCHER, "\\1")
    end
  end

  BLANK_SUBSECTIONS_MATCHER = /^### (準備|後始末)(\n+(^#|\z))/m
  def cleanup_blank_subsections
    while @contents.match(BLANK_SUBSECTIONS_MATCHER) do
      @contents.sub!(BLANK_SUBSECTIONS_MATCHER, "\\2")
    end
  end
end

def output_verify_targets_to_sections_list(contents, verify_targets)
  items_to_sections = {}
  contents.split(/^#[^#]/).each_with_index do |chapter, chapter_number|
    next if chapter_number <= 1
    chapter.split(/^##[^#]/).each_with_index do |section, section_number|
      next if section_number.zero?
      section_id = "#{chapter_number}.#{section_number}"
      items = section.match(/^### *確認する項目\s*([^#]+)\n#/)[1]
      items.each_line do |item|
        item.gsub!(/\A\s*-\s*|\s*\n?\z/, "")
        item.sub!(/(-[^-]+)-[^-]+\z/, "\\1")
        next if item.empty?
        items_to_sections[item] ||= []
        items_to_sections[item] << section_id
      end
    end
  end

  CSV.open(CHAPTERS_FILE, "w") do |rows|
    verify_targets.each do |target|
      section_ids = items_to_sections[target.sub(/(-[^-]+)-[^-]+\z/, "\\1")]
      if section_ids
        rows << [target, section_ids.join("\n")]
      else
        puts "  Warning: no verification for #{target}\n"
      end
    end
  end
end

def prepare_contents(source)
  contents = File.read(source)
  resolver = TemplateResolver.new(contents, VARIABLES)
  contents = resolver.resolve
  contents = ContentsCleaner.cleanup(contents)

  puts "Generating #{CHAPTERS_FILE}..."
  output_verify_targets_to_sections_list(contents, resolver.verify_targets)

  contents
end

task :default => :pdf

desc "Generate PDF"
task :pdf => PDF_FILES
rule ".pdf" => [".md", "Rakefile"] do |t|
  contents = prepare_contents(t.source)
  puts "Generating #{t.name}..."
  Tempfile.open("firefox-verification_manual") do |file|
    file.puts(contents)
    file.flush
    sh "pandoc", "-f", "markdown+ignore_line_breaks", "-o", t.name,
       "--table-of-contents", "--toc-depth=2",
       "-N",
       "-V", "documentclass=ltjsarticle",
       "-V", "classoption=titlepage",
       "--latex-engine=lualatex", file.path
  end
end

desc "Generate DOCX"
task :docx => DOCX_FILES
rule ".docx" => [".md", "Rakefile"] do |t|
  template_params = []
  if File.exist?("reference.dotx")
    template_params << "--reference-docx"
    template_params << "reference.dotx"
  end

  contents = prepare_contents(t.source)
  puts "Generating #{t.name}..."
  Tempfile.open("firefox-verification_manual") do |file|
    file.puts(contents)
    file.flush
    sh "pandoc", "-f", "markdown+ignore_line_breaks", "-o", t.name,
       "--table-of-contents", "--toc-depth=2",
       "-N",
       "-t", "docx",
       *template_params,
       file.path
  end
end

desc "Generate ODT"
task :odt => ODT_FILES
rule ".odt" => [".md", "Rakefile"] do |t|
  template_params = []
  if File.exist?("reference.ott")
    template_params << "--reference-odt"
    template_params << "reference.ott"
  end

  contents = prepare_contents(t.source)
  puts "Generating #{t.name}..."
  Tempfile.open("firefox-verification_manual") do |file|
    file.puts(contents)
    file.flush
    sh "pandoc", "-f", "markdown+ignore_line_breaks", "-o", t.name,
       "--table-of-contents", "--toc-depth=2",
       "-N",
       *template_params,
       file.path
  end
end
