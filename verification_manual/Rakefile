require "rake/clean"
require "tempfile"
require "csv"

#MD_FILES = FileList["*.md"]
MD_FILES = FileList["verification_manual.md"]
PDF_FILES = MD_FILES.map{|file| file.ext(".pdf") }
TARGETS_FILE = "verify-targets.csv"
CHAPTERS_FILE = "verify-targets-to-chapters.csv"
VARIABLES = {
  firefox_version:                "52.0 ESR",
  windows_version:                "Windows 7",
  configuration_sheet_name:       "customization-items.ods",
  meta_installer_name:            "Fx Meta Installer",
  meta_installer_file_name:       "FxMetaInstaller",
  meta_installer_version:         "52.0",
  install_path:                   "C:\\\\Program Files (x86)\\\\Mozilla Firefox",
  desktop_shortcut_path:          "C:\\\\Users\\\\Public\\\\Desktop\\\\Mozilla Firefox.lnk",
  start_menu_shortcut_path:       "C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Mozilla Firefox.lnk",
  finish_title:                   "Mozilla Firefox",
  finish_message:                 "インストールが完了しました",
  restart_title:                  "Mozilla Firefox",
  restart_message:                "今すぐコンピュータを再起動しますか？",
  mcd_local_file:                 "autoconfig.cfg",
  special_profile_path:           "%AppData%\\\\Mozilla\\\\Firefox\\\\Profiles",
  special_profile_name:           "Special",
  use_separate_profile:           false,
  start_with_no_remote:           false,
  home_page:                      "http://?????",
  window_title:                   "Mozilla Firefox",
  disabled_about_pages:           "about:robots",
  history_expiration_max_pages:   "???",
  expire_history_by_days_version: "Flexible Expire History by Days",
  max_cache_size_in_megabytes:    "???",
  download_dir:                   "C:\\\\?????",
  proxy_host:                     "10.0.2.2",
  proxy_auth_user:                "clearcode",
  pac_url:                        "http://??????/proxy.pac",
  pac_url_setup:                  "",
  ntlm_single_signon_hosts:       "????,????,????",
  max_connections:                       "6",
  max_persistent_connections_per_server: "2",
  max_persistent_connections_per_proxy:  "2",
  user_agent_name:                "Mozilla/5.0 (X11; Linux x86_64; rv:51.0) Gecko/20100101 Firefox/51.0",
  jar_file_sample_url_base:       "http://www.clear-code.com/temp",
  imported_certs:                 "(発行者名1)/(証明署名1), (発行者名1)/(証明署名2), ...",
  java_download_url:              "https://java.com/ja/download/",
  flash_download_url:             "https://get.adobe.com/jp/flashplayer/",
  acrobat__download_url:          "https://get.adobe.com/jp/reader/",
  shockwave__download_url:        "https://get.adobe.com/jp/shockwave/",
  silverlight_download_url:       "http://www.microsoft.com/silverlight/resources/install.aspx",
  wmp__download_url:              "http://www.interoperabilitybridges.com/Windows-Media-Player-Firefox-Plugin-Download",
}

CLOBBER.include(PDF_FILES)

def prepare_firefox_version_variables
  current_firefox_major_version = VARIABLES[:firefox_version].split(".").first.to_i
  VARIABLES["firefox#{current_firefox_major_version}"] = true
  (24..99).each do |version|
    VARIABLES["firefox#{version}_or_older"] = current_firefox_major_version <= version
    VARIABLES["firefox#{version}_or_later"] = current_firefox_major_version >= version
  end
end

def prepare_customizations_variables
  verify_targets = CSV.read(TARGETS_FILE)
  verify_targets.each do |key, _|
    VARIABLES[key] = true
    if key.count("-") > 1
      chosen_sub_index = key.split("-").last.to_i
      base_key = key.gsub(/-[^-]+\z/, "")
      VARIABLES[base_key] = true
      (1..10).each do |sub_index|
        unless sub_index == chosen_sub_index
          VARIABLES["#{base_key}-#{sub_index}"] = false
        end
      end
    end
  end
end

def cleanup_blank_lines(contents)
  MATCHER = /^( *([-*]|[0-9]\. ).+\n)\n+( *([-*]|[0-9]\. ))/m
  while contents.match(MATCHER) do
    contents.sub!(MATCHER, "\\1\\3")
  end
  contents
end

def cleanup_no_verification_steps(contents)
  BLANK_VERIFICATION_GROUPS_MATCHER = /^<!-- *GROUP *-->[^<]*\n *- *確認項目\n+<!-- *\/ *GROUP *-->/
  while contents.match(BLANK_VERIFICATION_GROUPS_MATCHER) do
    contents.sub!(BLANK_VERIFICATION_GROUPS_MATCHER, "")
  end

  BLANK_VERIFICATIONS_MATCHER = /^ *- *確認項目\n+( ?[0-9]\. |^#)/m
  while contents.match(BLANK_VERIFICATIONS_MATCHER) do
    contents.sub!(BLANK_VERIFICATIONS_MATCHER, "\\1")
  end

  contents
end

def cleanup_no_verification_sections(contents)
  MATCHER = /^## [^#]+^### 確認する項目$\s*^###.*?(^##? |\z)/m
  while contents.match(MATCHER) do
    contents.sub!(MATCHER, "\\1")
  end
  contents
end

def cleanup_no_section_chapters(contents)
  MATCHER = /^# [^#]+(^# |\z)/m
  while contents.match(MATCHER) do
    contents.sub!(MATCHER, "\\1")
  end
end

def output_verify_targets_to_sections_list(contents)
  items_to_sections = {}
  contents.split(/^#[^#]/).each_with_index do |chapter, chapter_number|
    next if chapter_number <= 1
    chapter.split(/^##[^#]/).each_with_index do |section, section_number|
      next if section_number.zero?
      section_id = "#{chapter_number}.#{section_number}"
      items = section.match(/^### *確認する項目\s*([^#]+)\n#/)[1]
      items.each_line do |item|
        item.gsub!(/\A\s*-\s*|\s*\n?\z/, "")
        item.sub!(/(-[^-]+)-[^-]+\z/, "\\1")
        next if item.empty?
        items_to_sections[item] ||= []
        items_to_sections[item] << section_id
      end
    end
  end

  CSV.open(CHAPTERS_FILE, "w") do |rows|
    verify_targets.each do |target, _|
      section_ids = items_to_sections[target.sub(/(-[^-]+)-[^-]+\z/, "\\1")]
      if section_ids
        rows << [target, section_ids.join("\n")]
      else
        puts "  Warning: no verification for #{target}\n"
      end
    end
  end
end

task :default => :pdf

desc "Generate PDF"
task :pdf => PDF_FILES

rule ".pdf" => [".md", "Rakefile"] do |t|
  require "mustache"

  prepare_firefox_version_variables
  prepare_customizations_variables

  contents = File.read(t.source)
  contents = Mustache.render(contents, VARIABLES)

  introduction, contents = contents.split(/<!-- *VERIFICATIONS ARE FROM HERE *-->/)

  contents = cleanup_blank_lines(contents)
  contents = cleanup_no_verification_steps(contents)
  contents = cleanup_no_verification_sections(contents)
  contents = cleanup_no_section_chapters(contents)

  contents = contents.gsub(/^[ \t]*<!--[^>]*-->\n|<!--[^>]*-->/, "")
  contents = "#{introduction}\n#{contents}"

  puts "Generating #{CHAPTERS_FILE}..."
  output_verify_targets_to_sections_list(contents)

  puts "Generating #{t.name}..."
  Tempfile.open("firefox-verification_manual") do |file|
    file.puts(contents)
    file.flush
    sh "pandoc", "-f", "markdown+ignore_line_breaks", "-o", t.name,
       "--table-of-contents", "--toc-depth=3",
       "-N",
       "-V", "documentclass=ltjsarticle",
       "-V", "classoption=titlepage",
       "--latex-engine=lualatex", file.path
  end
end
